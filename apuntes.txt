LO SIGUIENTE:
-2.2 signup (seguir con tutorial)

PARA PROBAR: python3
manage.py makemigrations
manage.py migrate
export TESTING=1
manage.py runserver

TESTS:
python3 manage.py test models.test_name --verbosity 2


TO-DO, no olvidar:
-crear una db en neon y modificar settings para usar esta bd
-makefile hacerlo bien
-preguntar a skye flake8

17/03
  ENTORNO VIRTUAL:
    -virtualenv p3_env --python=python3.9
    -source p3_env/bin/activate
    -pip3 install -r requirements.txt
    -pip freeze (para comprobar que se instaló)
  PREPARACIÓN FICHEROS:
    -creado makefile (copiado del enunciado)
    -copiamos el skeleton con el tutorial de django (startproject...)
    -creamos carpeta static fuera de la app (bellogin ha dicho que se comparte para las dos apps)
  DATABASE:
    -createdb -U alumnodb -h localhost psi-kahoot
    -linkeamos en settings la bd psi-kahoot
  2.2 USERS:
    -login y logout: copiamos en kahootclone/urls.py para admin y accounts de la p1
    -user: from django.contrib.auth.models import AbstractUser y copiamos la class User del enunciado
    -creamos en models/urls.py para hacer la redireccion desde kahootclone/urls.py
    -añadimos en settings.py AUTH_USER_MODE='models.User'
  HOME PAGE:
    - creamos la view y los templates para la pagina principal
    - realizamos los cambios apropiados en settings (literalmente me cago en mi puta madre)
    - al abrir la url, efectivamente, se ve la pagina principal
    - lo siguiente seria implementar login, logout, cositas de admin (los templates)
22/03
  TEMPLATES:  
    -copiamos las templates de registration de la práctica1
  SETTINGS.PY:
    -añadimos LOGIN_REDIRECT_URL= '/'  


*quitar unnecessary folders *.pyc, pycache, .vscode, node_modules
*num of collaborations: git log | grep "Author:" |sort|uniq-c

31/03:
  cada vez que el usuario responda, los puntos deben actualizarse
    recomiendan actualizar el método save

  models es data y views es funcionalidad

  services/models.py may be empty

  hacer loginrequiredmixin ya que la mayoria de las funcionalidades
  solo se podran hacer si esta el usuario logged in

  tener en cuenta las views que nos da django y decidir
    DetailViewdeleteview
    ListViewupdateview
    createview...
    todas las views deben ser class based

  -hacemos modelos:

    .question: on delete.cascade??
    .Django creates automatically a primary key called id for every model, so you
    should not create it explicitly??